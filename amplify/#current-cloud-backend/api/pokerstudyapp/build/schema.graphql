type Trainings @aws_iam @aws_cognito_user_pools {
  id: ID!
  handId: ID
  playerId: ID
  score: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Members @aws_iam @aws_cognito_user_pools {
  id: ID!
  playerId: ID
  memberPlan: String
  endDate: AWSDate
  skipTutorial: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Hands @aws_iam @aws_cognito_user_pools {
  id: ID!
  playerId: ID
  tableType: String
  handTags: String
  heroPosition: String
  handTitle: String!
  myHand_1: String
  myHand_2: String
  preflopNotes: String
  preflopAction: String
  preflopHeroRange: String
  preflopVillainRange: String
  flopNotes: String
  flopAction: String
  flopHeroRange: String
  flopVillainRange: String
  turnNotes: String
  turnAction: String
  turnHeroRange: String
  turnVillainRange: String
  riverNotes: String
  riverAction: String
  riverHeroRange: String
  flopCards_1: String
  flopCards_3: String
  flopCards_2: String
  turnCard: String
  riverCard: String
  villainPosition: String
  riverVillainRange: String
  stake: String
  share: String
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTrainingsConnection @aws_iam @aws_cognito_user_pools {
  items: [Trainings]!
  nextToken: String
}

input ModelTrainingsFilterInput {
  id: ModelIDInput
  handId: ModelIDInput
  playerId: ModelIDInput
  score: ModelFloatInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTrainingsFilterInput]
  or: [ModelTrainingsFilterInput]
  not: ModelTrainingsFilterInput
}

type Query {
  getTrainings(id: ID!): Trainings @aws_iam @aws_cognito_user_pools
  listTrainings(filter: ModelTrainingsFilterInput, limit: Int, nextToken: String): ModelTrainingsConnection @aws_iam @aws_cognito_user_pools
  getMembers(id: ID!): Members @aws_iam @aws_cognito_user_pools
  listMembers(filter: ModelMembersFilterInput, limit: Int, nextToken: String): ModelMembersConnection @aws_iam @aws_cognito_user_pools
  getHands(id: ID!): Hands @aws_iam @aws_cognito_user_pools
  listHands(filter: ModelHandsFilterInput, limit: Int, nextToken: String): ModelHandsConnection @aws_iam @aws_cognito_user_pools
}

input ModelTrainingsConditionInput {
  handId: ModelIDInput
  playerId: ModelIDInput
  score: ModelFloatInput
  and: [ModelTrainingsConditionInput]
  or: [ModelTrainingsConditionInput]
  not: ModelTrainingsConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTrainingsInput {
  id: ID
  handId: ID
  playerId: ID
  score: Float
}

input UpdateTrainingsInput {
  id: ID!
  handId: ID
  playerId: ID
  score: Float
}

input DeleteTrainingsInput {
  id: ID!
}

type Mutation {
  createTrainings(input: CreateTrainingsInput!, condition: ModelTrainingsConditionInput): Trainings @aws_iam @aws_cognito_user_pools
  updateTrainings(input: UpdateTrainingsInput!, condition: ModelTrainingsConditionInput): Trainings @aws_iam @aws_cognito_user_pools
  deleteTrainings(input: DeleteTrainingsInput!, condition: ModelTrainingsConditionInput): Trainings @aws_iam @aws_cognito_user_pools
  createMembers(input: CreateMembersInput!, condition: ModelMembersConditionInput): Members @aws_iam @aws_cognito_user_pools
  updateMembers(input: UpdateMembersInput!, condition: ModelMembersConditionInput): Members @aws_iam @aws_cognito_user_pools
  deleteMembers(input: DeleteMembersInput!, condition: ModelMembersConditionInput): Members @aws_iam @aws_cognito_user_pools
  createHands(input: CreateHandsInput!, condition: ModelHandsConditionInput): Hands @aws_iam @aws_cognito_user_pools
  updateHands(input: UpdateHandsInput!, condition: ModelHandsConditionInput): Hands @aws_iam @aws_cognito_user_pools
  deleteHands(input: DeleteHandsInput!, condition: ModelHandsConditionInput): Hands @aws_iam @aws_cognito_user_pools
}

input ModelSubscriptionTrainingsFilterInput {
  id: ModelSubscriptionIDInput
  handId: ModelSubscriptionIDInput
  playerId: ModelSubscriptionIDInput
  score: ModelSubscriptionFloatInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTrainingsFilterInput]
  or: [ModelSubscriptionTrainingsFilterInput]
}

type Subscription {
  onCreateTrainings(filter: ModelSubscriptionTrainingsFilterInput): Trainings @aws_subscribe(mutations: ["createTrainings"]) @aws_iam @aws_cognito_user_pools
  onUpdateTrainings(filter: ModelSubscriptionTrainingsFilterInput): Trainings @aws_subscribe(mutations: ["updateTrainings"]) @aws_iam @aws_cognito_user_pools
  onDeleteTrainings(filter: ModelSubscriptionTrainingsFilterInput): Trainings @aws_subscribe(mutations: ["deleteTrainings"]) @aws_iam @aws_cognito_user_pools
  onCreateMembers(filter: ModelSubscriptionMembersFilterInput): Members @aws_subscribe(mutations: ["createMembers"]) @aws_iam @aws_cognito_user_pools
  onUpdateMembers(filter: ModelSubscriptionMembersFilterInput): Members @aws_subscribe(mutations: ["updateMembers"]) @aws_iam @aws_cognito_user_pools
  onDeleteMembers(filter: ModelSubscriptionMembersFilterInput): Members @aws_subscribe(mutations: ["deleteMembers"]) @aws_iam @aws_cognito_user_pools
  onCreateHands(filter: ModelSubscriptionHandsFilterInput): Hands @aws_subscribe(mutations: ["createHands"]) @aws_iam @aws_cognito_user_pools
  onUpdateHands(filter: ModelSubscriptionHandsFilterInput): Hands @aws_subscribe(mutations: ["updateHands"]) @aws_iam @aws_cognito_user_pools
  onDeleteHands(filter: ModelSubscriptionHandsFilterInput): Hands @aws_subscribe(mutations: ["deleteHands"]) @aws_iam @aws_cognito_user_pools
}

type ModelMembersConnection @aws_iam @aws_cognito_user_pools {
  items: [Members]!
  nextToken: String
}

input ModelMembersFilterInput {
  id: ModelIDInput
  playerId: ModelIDInput
  memberPlan: ModelStringInput
  endDate: ModelStringInput
  skipTutorial: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMembersFilterInput]
  or: [ModelMembersFilterInput]
  not: ModelMembersFilterInput
}

input ModelMembersConditionInput {
  playerId: ModelIDInput
  memberPlan: ModelStringInput
  endDate: ModelStringInput
  skipTutorial: ModelStringInput
  and: [ModelMembersConditionInput]
  or: [ModelMembersConditionInput]
  not: ModelMembersConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateMembersInput {
  id: ID
  playerId: ID
  memberPlan: String
  endDate: AWSDate
  skipTutorial: String
}

input UpdateMembersInput {
  id: ID!
  playerId: ID
  memberPlan: String
  endDate: AWSDate
  skipTutorial: String
}

input DeleteMembersInput {
  id: ID!
}

input ModelSubscriptionMembersFilterInput {
  id: ModelSubscriptionIDInput
  playerId: ModelSubscriptionIDInput
  memberPlan: ModelSubscriptionStringInput
  endDate: ModelSubscriptionStringInput
  skipTutorial: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionMembersFilterInput]
  or: [ModelSubscriptionMembersFilterInput]
}

type ModelHandsConnection @aws_iam @aws_cognito_user_pools {
  items: [Hands]!
  nextToken: String
}

input ModelHandsFilterInput {
  id: ModelIDInput
  playerId: ModelIDInput
  tableType: ModelStringInput
  handTags: ModelStringInput
  heroPosition: ModelStringInput
  handTitle: ModelStringInput
  myHand_1: ModelStringInput
  myHand_2: ModelStringInput
  preflopNotes: ModelStringInput
  preflopAction: ModelStringInput
  preflopHeroRange: ModelStringInput
  preflopVillainRange: ModelStringInput
  flopNotes: ModelStringInput
  flopAction: ModelStringInput
  flopHeroRange: ModelStringInput
  flopVillainRange: ModelStringInput
  turnNotes: ModelStringInput
  turnAction: ModelStringInput
  turnHeroRange: ModelStringInput
  turnVillainRange: ModelStringInput
  riverNotes: ModelStringInput
  riverAction: ModelStringInput
  riverHeroRange: ModelStringInput
  flopCards_1: ModelStringInput
  flopCards_3: ModelStringInput
  flopCards_2: ModelStringInput
  turnCard: ModelStringInput
  riverCard: ModelStringInput
  villainPosition: ModelStringInput
  riverVillainRange: ModelStringInput
  stake: ModelStringInput
  share: ModelStringInput
  description: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelHandsFilterInput]
  or: [ModelHandsFilterInput]
  not: ModelHandsFilterInput
}

input ModelHandsConditionInput {
  playerId: ModelIDInput
  tableType: ModelStringInput
  handTags: ModelStringInput
  heroPosition: ModelStringInput
  handTitle: ModelStringInput
  myHand_1: ModelStringInput
  myHand_2: ModelStringInput
  preflopNotes: ModelStringInput
  preflopAction: ModelStringInput
  preflopHeroRange: ModelStringInput
  preflopVillainRange: ModelStringInput
  flopNotes: ModelStringInput
  flopAction: ModelStringInput
  flopHeroRange: ModelStringInput
  flopVillainRange: ModelStringInput
  turnNotes: ModelStringInput
  turnAction: ModelStringInput
  turnHeroRange: ModelStringInput
  turnVillainRange: ModelStringInput
  riverNotes: ModelStringInput
  riverAction: ModelStringInput
  riverHeroRange: ModelStringInput
  flopCards_1: ModelStringInput
  flopCards_3: ModelStringInput
  flopCards_2: ModelStringInput
  turnCard: ModelStringInput
  riverCard: ModelStringInput
  villainPosition: ModelStringInput
  riverVillainRange: ModelStringInput
  stake: ModelStringInput
  share: ModelStringInput
  description: ModelStringInput
  and: [ModelHandsConditionInput]
  or: [ModelHandsConditionInput]
  not: ModelHandsConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateHandsInput {
  id: ID
  playerId: ID
  tableType: String
  handTags: String
  heroPosition: String
  handTitle: String!
  myHand_1: String
  myHand_2: String
  preflopNotes: String
  preflopAction: String
  preflopHeroRange: String
  preflopVillainRange: String
  flopNotes: String
  flopAction: String
  flopHeroRange: String
  flopVillainRange: String
  turnNotes: String
  turnAction: String
  turnHeroRange: String
  turnVillainRange: String
  riverNotes: String
  riverAction: String
  riverHeroRange: String
  flopCards_1: String
  flopCards_3: String
  flopCards_2: String
  turnCard: String
  riverCard: String
  villainPosition: String
  riverVillainRange: String
  stake: String
  share: String
  description: String
}

input UpdateHandsInput {
  id: ID!
  playerId: ID
  tableType: String
  handTags: String
  heroPosition: String
  handTitle: String
  myHand_1: String
  myHand_2: String
  preflopNotes: String
  preflopAction: String
  preflopHeroRange: String
  preflopVillainRange: String
  flopNotes: String
  flopAction: String
  flopHeroRange: String
  flopVillainRange: String
  turnNotes: String
  turnAction: String
  turnHeroRange: String
  turnVillainRange: String
  riverNotes: String
  riverAction: String
  riverHeroRange: String
  flopCards_1: String
  flopCards_3: String
  flopCards_2: String
  turnCard: String
  riverCard: String
  villainPosition: String
  riverVillainRange: String
  stake: String
  share: String
  description: String
}

input DeleteHandsInput {
  id: ID!
}

input ModelSubscriptionHandsFilterInput {
  id: ModelSubscriptionIDInput
  playerId: ModelSubscriptionIDInput
  tableType: ModelSubscriptionStringInput
  handTags: ModelSubscriptionStringInput
  heroPosition: ModelSubscriptionStringInput
  handTitle: ModelSubscriptionStringInput
  myHand_1: ModelSubscriptionStringInput
  myHand_2: ModelSubscriptionStringInput
  preflopNotes: ModelSubscriptionStringInput
  preflopAction: ModelSubscriptionStringInput
  preflopHeroRange: ModelSubscriptionStringInput
  preflopVillainRange: ModelSubscriptionStringInput
  flopNotes: ModelSubscriptionStringInput
  flopAction: ModelSubscriptionStringInput
  flopHeroRange: ModelSubscriptionStringInput
  flopVillainRange: ModelSubscriptionStringInput
  turnNotes: ModelSubscriptionStringInput
  turnAction: ModelSubscriptionStringInput
  turnHeroRange: ModelSubscriptionStringInput
  turnVillainRange: ModelSubscriptionStringInput
  riverNotes: ModelSubscriptionStringInput
  riverAction: ModelSubscriptionStringInput
  riverHeroRange: ModelSubscriptionStringInput
  flopCards_1: ModelSubscriptionStringInput
  flopCards_3: ModelSubscriptionStringInput
  flopCards_2: ModelSubscriptionStringInput
  turnCard: ModelSubscriptionStringInput
  riverCard: ModelSubscriptionStringInput
  villainPosition: ModelSubscriptionStringInput
  riverVillainRange: ModelSubscriptionStringInput
  stake: ModelSubscriptionStringInput
  share: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionHandsFilterInput]
  or: [ModelSubscriptionHandsFilterInput]
}
